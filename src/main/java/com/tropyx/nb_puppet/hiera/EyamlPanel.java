/*
 * Copyright (C) 2014 mkleint
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.tropyx.nb_puppet.hiera;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import javax.swing.JEditorPane;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.EditorKit;
import org.netbeans.api.editor.mimelookup.MimeLookup;
import org.netbeans.api.extexecution.ExternalProcessBuilder;
import org.netbeans.modules.editor.NbEditorDocument;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.RequestProcessor;

/**
 *
 * @author mkleint
 */
public class EyamlPanel extends javax.swing.JPanel implements Runnable {

    private JEditorPane pane;
    private final Lookup lookup;
    private final RequestProcessor.Task task = RP.create(this);
    private static final RequestProcessor RP = new RequestProcessor(EyamlPanel.class);

    public EyamlPanel(Lookup lookup) {
        initComponents();
        if ("Aqua".equals(UIManager.getLookAndFeel().getID())) {
            setBackground(UIManager.getColor("NbExplorerView.background"));
        }
        this.lookup = lookup;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void load() {
        task.schedule(0);
    }

    @Override
    public void run() {
        FileObject file = lookup.lookup(FileObject.class);
        if (file == null) {
            setLabelError("No file associated with document.");
            return;
        }

            ExternalProcessBuilder builder = new ExternalProcessBuilder("eyaml")
                    .redirectErrorStream(true)
                    .workingDirectory(FileUtil.toFile(file.getParent()))
                    .addArgument("decrypt")
                    .addArgument("--eyaml")
                    .addArgument(file.getNameExt());


            Process process;
            final StringBuilder sb = new StringBuilder();
            try {
                process = builder.call();
                process.waitFor();
                InputStream os = process.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(os));
                String line = br.readLine();
                while (line != null) {
                    sb.append(line).append("\n");
                    line = br.readLine();
                }
                if (process.exitValue() != 0) {
                    setLabelError("eyaml exited with non 0 value:" + builder.toString() + "\n" + sb.toString());
                    return;
                }
                setEditorText(sb.toString());
            } catch (IOException | InterruptedException ex) {
                setLabelError("Exception:" + ex);
            } finally {
            }
    }

    public void setEditorText(final String sb) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                EditorKit kit = MimeLookup.getLookup("text/x-yaml").lookup(EditorKit.class);
                NbEditorDocument doc = (NbEditorDocument) kit.createDefaultDocument();
                pane = new JEditorPane("text/x-yaml", null);
                pane.setDocument(doc);
                removeAll();
                add(doc.createEditor(pane), BorderLayout.CENTER);
                try {
                    doc.insertString(0, sb, null);
                } catch (BadLocationException ex) {
                    Exceptions.printStackTrace(ex);
                }
                pane.setEditable(false);
                pane.setEnabled(false);
                pane.requestFocus();
                pane.setCaretPosition(0);
                revalidate();
            }
        });
    }

    private void setLabelError(String string) {
        setEditorText(string);
    }
}
