/*
 * Copyright (C) 2014 mkleint
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.tropyx.nb_puppet.hiera;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Map;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.EditorKit;
import org.netbeans.api.editor.mimelookup.MimeLookup;
import org.netbeans.api.extexecution.ExecutionDescriptor;
import org.netbeans.api.extexecution.ExternalProcessBuilder;
import org.netbeans.api.project.FileOwnerQuery;
import org.netbeans.api.project.Project;
import org.netbeans.modules.editor.NbEditorDocument;
import org.netbeans.spi.project.AuxiliaryProperties;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.RequestProcessor;
import org.yaml.snakeyaml.Yaml;

/**
 *
 * @author mkleint
 */
public class EyamlPanel extends javax.swing.JPanel implements Runnable {

    private JEditorPane pane;
    private final Lookup lookup;
    private final RequestProcessor.Task task = RP.create(this);
    private static final RequestProcessor RP = new RequestProcessor(EyamlPanel.class);

    public EyamlPanel(Lookup lookup) {
        initComponents();
        if ("Aqua".equals(UIManager.getLookAndFeel().getID())) {
            setBackground(UIManager.getColor("NbExplorerView.background"));
        }
        this.lookup = lookup;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void load() {
        task.schedule(0);
    }

    @Override
    public void run() {
        FileObject file = lookup.lookup(FileObject.class);
        if (file == null) {
            setLabelError("No file associated with document.");
            return;
        }
        Project p = FileOwnerQuery.getOwner(file);
        if (p == null) {
            setLabelError("File is not part of puppet project");
            return;
        }
        AuxiliaryProperties aux = p.getLookup().lookup(AuxiliaryProperties.class);
        if (aux == null) {
            setLabelError("File is not part of puppet project");
            return;
        }
        String hiera = aux.get(HieraPanel.HIERALOCATION, true);
        if (hiera == null) {
            hiera = "hiera.yaml";
        }
        FileObject hierfo = p.getProjectDirectory().getFileObject(hiera);
        String privateKey = null;
        String publicKey = null;
        if (hierfo == null) {
            setLabelError("No hiera.yaml file at project location:" + hiera);
            return;
        }
        Yaml yaml = new Yaml();
        try {
            Map<String, Object> returnVal = (Map<String, Object>) yaml.load(hierfo.getInputStream());
            Map<String, Object> eyamlNode = (Map<String, Object>) returnVal.get(":eyaml");
            if (eyamlNode != null) {
                privateKey = (String) eyamlNode.get(":pkcs7_private_key");
                publicKey = (String) eyamlNode.get(":pkcs7_public_key");
            }
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }

        if (privateKey != null && publicKey != null) {
            ExternalProcessBuilder builder = new ExternalProcessBuilder("eyaml")
                    .workingDirectory(FileUtil.toFile(p.getProjectDirectory()))
                    .addArgument("decrypt")
                    .addArgument("--eyaml")
                    .addArgument(FileUtil.getRelativePath(p.getProjectDirectory(), file))
                    .addArgument("--pkcs7-private-key").addArgument(privateKey)
                    .addArgument("--pkcs7-public-key").addArgument(publicKey);

            Process process;
            final StringBuilder sb = new StringBuilder();
            try {
                process = builder.call();
                process.waitFor();
                if (process.exitValue() != 0) {
                    setLabelError("eyaml exited with non null value:" + builder.toString());
                    return;
                }
                InputStream os = process.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(os));
                String line = br.readLine();
                while (line != null) {
                    sb.append(line).append("\n");
                    line = br.readLine();
                }
            } catch (IOException | InterruptedException ex) {
            } finally {
            }
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    EditorKit kit = MimeLookup.getLookup("text/x-yaml").lookup(EditorKit.class);
                    NbEditorDocument doc = (NbEditorDocument) kit.createDefaultDocument();
                    pane = new JEditorPane("text/x-yaml", null);
                    pane.setDocument(doc);
                    removeAll();
                    add(doc.createEditor(pane), BorderLayout.CENTER);
                    try {
                        doc.insertString(0, sb.toString(), null);
                    } catch (BadLocationException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    pane.setEditable(false);
                    pane.requestFocus();
                    pane.setCaretPosition(0);
                    revalidate();
                }
            });

        } else {
            setLabelError(":pkcs7_private_key and :pkcs7_public_key are not defined in hiera.yaml file.");
        }

    }

    private void setLabelError(String string) {
                    removeAll();
                    add(new JLabel(string), BorderLayout.CENTER);
                    revalidate();
    }
}
